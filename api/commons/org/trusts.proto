syntax = "proto3";

package api.commons.org;

import "api/commons/auth/perms.proto";
import "api/commons/org/labels.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/tcncloud/api/api.commons.org;org";
option java_package = "com.tcn.matrix.api.commons.org";

// Trust is the entity message for trusts.
message Trust {
  // ID of the trust.
  string trust_id = 1;
  // Org ID of the org giving out the trust.
  string grantor = 2;
  // Org ID of the org receiving the trust.
  string grantee = 3;
  // Name of the trust.
  string name = 4;
  // Description of the trust.
  string description = 5;
  // Permissions the grantor allows users within the
  // grantee org to have when assigned.
  repeated api.commons.auth.Permission permissions = 6;
  // Labels associated with the trusted permissions.
  repeated Label labels = 7;
  // Status of the Trust.
  Status status = 8;

  bool deleted = 9;
}

// Status represents the states that trusts can be in.
enum Status {
  PENDING = 0;
  REJECTED = 1;
  ACCEPTED = 2;
}

// TrustGroup contains ALL trusted permission/label groups
// assigned to a user.
message TrustGroup {
  // Org ID of the org the trusts are from.
  string grantor = 1;

  // All perm/label groups the user has from the grantor org.
  // The length of the labeled_permissions list is equal
  // to the number of assigned trusts the user has from
  // the grantor org.
  repeated LabeledPermissions labeled_permissions = 2;

  message LabeledPermissions {
    repeated api.commons.auth.Permission permissions = 1;
    repeated Label labels = 2;
  }
}

// TrustFilter is used to filter trusts during list RPCs.
message TrustFilter {
  // Only return trusts with grantor org id matching this value.
  // Nil will not filter based on grantor.
  google.protobuf.StringValue grantor = 1;
  // Only return trusts with grantee org id matching this value.
  // Nil will not filter based on grantee.
  google.protobuf.StringValue grantee = 2;
  // Only return trusts matching ANY of the given statuses.bool
  // Nil will not filter based on status.
  StatusFilter status_filter = 3;

  message StatusFilter {
    repeated Status values = 1;
  }
}
