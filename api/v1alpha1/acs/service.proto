syntax = "proto3";

package api.v1alpha1.acs;

import "annotations/authz.proto";
import "commons/acd.proto";
import "commons/auth/perms.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/tcncloud/api/v1alpha1.acs;acs";
option java_package = "com.tcn.api.v1alpha1.acs";

service Acs {
  rpc CreateScript(CreateScriptRequest) returns (CreateScriptResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/script/create";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc UpdateScript(UpdateScriptRequest) returns (UpdateScriptResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/script/update";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc GetScriptById(GetScriptByIdRequest) returns (GetScriptByIdResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/script/getbyid";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc ListScripts(ListScriptsRequest) returns (stream ScriptDetails) {
    option (google.api.http).post = "/api/v1alpha1/acs/script/list";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc SaveResponses(SaveResponsesRequest) returns (SaveResponsesResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/responses/save";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc GetResponses(GetResponsesRequest) returns (GetResponsesResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/responses/get";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc CreateRule(CreateRuleRequest) returns (CreateRuleResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/mapper/create";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc UpdateRules(UpdateRulesRequest) returns (UpdateRulesResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/mapper/update";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/mapper/list";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc CreateRegexEvaluator(CreateRegexEvaluatorRequest) returns (CreateRegexEvaluatorResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/regex/create";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc UpdateRegexEvaluator(UpdateRegexEvaluatorRequest) returns (UpdateRegexEvaluatorResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/regex/update";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc ListRegexEvaluators(ListRegexEvaluatorsRequest) returns (ListRegexEvaluatorsResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/regex/list";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc DeleteRule(DeleteRuleRequest) returns (DeleteRuleResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/mapper/delete";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }

  rpc GetScript(GetScriptRequest) returns (GetScriptResponse) {
    option (google.api.http).post = "/api/v1alpha1/acs/script/get";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT_CALL_SCRIPTS,
            PERMISSION_DEV
          ]
        }
      ];
    };
  }
}

message CreateScriptRequest {
  Script script = 1;
  // string org_id = 2;
  // string region_id = 3;
}
message CreateScriptResponse {
  string script_id = 1;
}

message UpdateScriptRequest {
  Script script = 1;
  string script_id = 2;
  // string org_id = 3;
  // string region_id = 4;
}
message UpdateScriptResponse {
  string script_id = 1;
}

message GetScriptByIdRequest {
  string script_id = 1;
  // string org_id = 2;
  // string region_id = 3;
}
message GetScriptByIdResponse {
  Script script = 1;
  string script_id = 2;
}

message ListScriptsRequest {
  // string org_id = 1;
  // string region_id = 2;
}
message ScriptDetails {
  string script_id = 1;
  string name = 2;
  string description = 3;
}

message Script {
  repeated ScriptPage pages = 1;
  string name = 2;
  string description = 3;
}

message ScriptPage {
  int64 page_number = 1;
  RecordingOnNavEnum record_on_arrival = 2;
  RecordingOnNavEnum record_on_exit = 3;
  repeated ScriptElement elements = 4;
}

message ScriptElement {
  string id = 1; // uuid
  string name = 2; // no spaces and special chars !@#$%^&*(){}[],;"':\/?<>.
  string header = 3;
  string prompt = 4;
  bool required = 5;
  repeated ConditionOption conditional = 6;
  ElementType element = 7;
}

enum ScriptElementType {
  RAW_TEXT = 0; // Raw Text only (no response)
  TEXT_BOX = 1; // Free Form
  TEXT_BOX_ALPHA = 2;
  TEXT_BOX_NUM = 3;
  TEXT_AREA = 4;
  TEXT_VERIFICATION = 5;
  REGEX = 6;
  REGEX_TEXT_AREA = 7;
  DROP_DOWN = 100; // Single Choice
  CALENDAR = 101;
  PHONE = 102;
  RADIO = 103;
  MULTI_SELECT = 200; // Multi Choice
  CHECKBOX = 201;
}
message ElementType {
  oneof element {
    RawText raw_text = 1; // RawText, no value
    StringDefaultValue text_area = 2; // FreeForm
    StringDefaultValue text_box = 3;
    StringDefaultValue text_box_alpha = 4;
    StringDefaultValue text_box_num = 5;
    StringDefaultValue text_verification = 6;
    RegexDefaultValue regex = 7;
    RegexDefaultValue regex_text_area = 8;
    SelectDefaultValue drop_down = 100; // SingleChoice
    StringDefaultValue calendar = 101;
    StringDefaultValue phone = 102;
    SelectDefaultValue radio = 103;
    MultiSelectDefaultValue multi_select = 200; // MultiChoice
    MultiSelectDefaultValue checkbox = 201;
  }
}

message RawText {}
message StringDefaultValue {
  string default_value = 1;
}
message RegexDefaultValue {
  string default_value = 1;
  int64 response_evaluator_sid = 2; // xml_client_property_sid
}
message SelectDefaultValue {
  repeated string options = 1;
  int64 default_value_index = 2;
}
message MultiSelectDefaultValue {
  repeated string options = 1;
  repeated int64 default_value_indexes = 2; // makes sense to support multiple on these right?
}

message ConditionOption {
  string value = 1;
  ComparisonType comparison = 2;
  int64 page_number = 3;
}

enum RecordingOnNavEnum {
  KEEP = 0;
  ON = 1;
  OFF = 2;
}

enum ComparisonType {
  EQUAL = 0;
  NOT_EQUAL = 1;
  GREATER_THAN = 2;
  LESS_THAN = 3;
  GREATER_THAN_EQUAL_TO = 4;
  LESS_THAN_EQUAL_TO = 5;
  CONTAINS = 6;
  DOES_NOT_CONTAIN = 7;
  BLANK = 8;
  NOT_BLANK = 9;
  STARTS_WITH = 10;
  DOES_NOT_START_WITH = 11;
  ENDS_WITH = 12;
  DOES_NOT_END_WITH = 13;
}

// -------- Agent Actions Stream -------
// continuously tracked and occasionally batch updated
message AgentAction {
  google.protobuf.Timestamp timestamp = 1;
  AgentEventType event = 2;
  int64 session_sid = 3;
  int64 agent_call_sid = 4;
}

enum AgentEventTypeEnum {
  CALL_CONNECTED = 0;
  CALL_DISCONNECTED = 1;
  SCRIPT_PAGE_CHANGE = 2;
  SCRIPT_ELEMENT_FOCUS = 3;
  SCRIPT_ELEMENT_UPDATED = 4;
  KEY_PRESS = 5;
  CLICK_LINK = 6;
  CLICK_BUTTON = 7;
  APP_UNFOCUSED = 8;
}

message AgentEventType {
  oneof event {
    CallConnected connected = 1; // relative timestamp
    CallDisconnected disconnected = 2; // relative timstamp
    PageChange page_change = 3; // script pagination nav
    ElementFocus element_focus = 4; // script element was focused by user
    ElementResponse element_updated = 5; // script element was updated by user
    KeyPress key_press = 6; // special key presses (shortcuts, etc)
    ClickLink click_link = 7; // weblink or link script element clicked
    ClickButton click_button = 8; // a button in the UI was clicked
    AppUnfocused app_unfocused = 9; // the entire app was unfocused
    AppRefocused app_refocused = 10; // the entire app was refocused
  }
}

message CallConnected {}
message CallDisconnected {}
message AppUnfocused {}
message AppRefocused {}

message ClickButton {
  enum Buttons {
    SCHEDULED_CALLBACK = 0;
    NEXT_CALL = 1;
    // TODO etc etc
  }

  Buttons button = 1;
}

// the changed the page
// (maybe include an option for when they hit next instead of a page number)
message PageChange {
  int64 previous_page = 1;
  int64 destination_page = 2;
}

// an element was focused
message ElementFocus {
  string element_id = 1;
}

// a special key was pressed
// note: might not need this since tabs will be an element focus and enter will be an unfocus
message KeyPress {
  enum WhichKey {
    TAB = 0;
    ENTER = 1;
    ESC = 2;
    // TODO: keyboard shortcuts
  }

  WhichKey key_press = 2;
}

// they clicked a link the ScriptElement (markdown)
message ClickLink {
  string element_id = 1;
  string url = 2;
  // maybe include the url with the mailmerge fields intact
}

// -------- Agent Script Responses --------
message SaveResponsesRequest {
  string script_id = 1; // need to link these? for transfers?
  int64 call_id = 2; // needed for sure
  string campaign_id = 3; // to enable searching by campaign? maybe not relevant
  // string org_id = 4;
  // string region_id = 5;
  // int64 agent_id = 6;                     // only one agent_id associated with this anyway...
  Responses responses = 7;
}

message Responses {
  repeated ElementResponse responses = 1;
}

message StringArrayResponse { // since you can't do repeated in oneofs
  repeated string values = 1;
}

message RegexStringResponse {
  string value = 1;
  int64 response_evaluator_sid = 2; // used for validating on call history edits
}

message ElementResponse {
  string id = 1; // used for populating on transfer
  string header = 2;
  google.protobuf.Timestamp last_edited = 3;
  oneof element {
    // RawText raw_text = 1;                  // No Response
    string text_area = 10; // FreeForm
    string text_box = 11;
    string text_box_alpha = 12;
    string text_box_num = 13;
    string text_verification = 14;
    RegexStringResponse regex = 15;
    RegexStringResponse regex_text_area = 16;
    string drop_down = 100; // SingleChoice
    string calendar = 101;
    string phone = 102;
    string radio = 103;
    StringArrayResponse multi_select = 200; // MultiChoice
    StringArrayResponse checkbox = 201;
  }
}

message SaveResponsesResponse {}

message GetResponsesRequest {
  int64 call_id = 1;
  // string org_id = 2;
  // string region_id = 3;
  // int64 agent_id = 4;
}

message GetResponsesResponse {
  Responses responses = 1;
  string script_id = 2;
  string campaign_id = 3;
}

enum MapperRuleFieldEnum {
  // agent info
  AGENT_ID = 0;
  AGENT_USERNAME = 3;
  CALLER_ID = 5;
  PHONE_NUMBER = 2; // consumer phone number?
  GROUP_ID = 7;

  // phone metadata
  AREA_CODE = 8;
  COUNTRY_CODE = 10;
  NUMBER_TYPE = 17;
  REGION_STATE_PROVINCE_CODE = 19;
  REGION_STATE_PROVINCE_NAME = 20;
  TIME_ZONE = 21;

  // zip/postal metadata
  CITY_NAME = 23;
  COUNTY_NAME = 26;
  STATE_PROVINCE_ABBREVIATION = 29;
  STATE_PROVINCE_NAME = 30;

  // everything else
  DATE = 32;
  TIME = 33; // probably need to validate in frontend like 11:30am
  CUSTOM_METADATA = 35; // text box input or?
  SCHEDULED_CALLBACK_DATA = 36; // text box or pull?
  AGENT_SKILLS = 37; // need to fetch list of skills from org
  DAY_OF_WEEK = 40;
  MONTH_OF_YEAR = 41;
  IVR = 42;
}

enum MapperRuleConditionEnum {
  MAPPER_EQUAL = 0;
  MAPPER_NOT_EQUAL = 1;
  MAPPER_GREATER_THAN = 2;
  MAPPER_LESS_THAN = 3;
  MAPPER_GREATER_THAN_EQUAL_TO = 4;
  MAPPER_LESS_THAN_EQUAL_TO = 5;
  MAPPER_CONTAINS = 6;
  MAPPER_DOES_NOT_CONTAIN = 7;
}

message UpdateRulesRequest {
  repeated RuleDetails rules = 1;
  // string org_id = 5;
  // string region_id = 6;
}

message UpdateRulesResponse {
  repeated string mapper_ids = 1;
}

message RegexEvaluator {
  string id = 1;
  string name = 2;
  string description = 3;
  string regex = 4;
}

message CreateRegexEvaluatorRequest {
  string name = 1;
  string description = 2;
  string regex = 3;
  // string org_id = 4;
}

message CreateRegexEvaluatorResponse {
  string id = 1;
}

message UpdateRegexEvaluatorRequest {
  string id = 1;
  string name = 2;
  string description = 3;
  string regex = 4;
  // string org_id = 5;
}

message UpdateRegexEvaluatorResponse {
  string id = 1;
}

message ListRegexEvaluatorsRequest { // add criteria later?
  // string org_id  = 1;
}

message ListRegexEvaluatorsResponse {
  repeated RegexEvaluator regexes = 1;
}

message CreateRuleRequest {
  MapperRuleFieldEnum field = 1;
  MapperRuleConditionEnum condition = 2;
  string value = 3;
  string script_id = 4;
  int64 position = 5;
  string custom_field = 6;
  // string org_id = 5;
  // string region_id = 6;
}

message CreateRuleResponse {
  string mapper_id = 1;
}

message ListRulesRequest {
  // org_id = 1;
  // region_id = 2;
}

message RuleDetails {
  MapperRuleFieldEnum field = 1;
  MapperRuleConditionEnum condition = 2;
  string value = 3;
  string mapper_id = 4;
  string script_id = 5;
  int64 position = 6;
  string custom_field = 7;
}

message ListRulesResponse {
  repeated RuleDetails rules = 1;
}

message DeleteRuleRequest {
  string mapper_id = 1;
  // string org_id = 2;
  // string region_id = 3;
}

message DeleteRuleResponse {
  string mapper_id = 1;
}

message GetScriptRequest {
  int64 call_id = 3;
  commons.CallType.Enum call_type = 4;
  string scheduled_callback_id = 5;
}

message GetScriptResponse {
  Script script = 1;
  string script_id = 2;
}
