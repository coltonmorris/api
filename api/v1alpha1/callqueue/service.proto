syntax = "proto3";

package api.v1alpha1.callqueue;

import "annotations/authz.proto";
import "api/commons/call.proto";
import "api/commons/sms.proto";
import "api/v0alpha/p3api.proto";
import "google/api/annotations.proto";

option go_package = "github.com/tcncloud/api/v1alpha1/callqueue;callqueue";
option java_package = "com.tcn.matrix.api.v1alpha1.callqueue";

service CallQueue {
  // Returns either a preview record or preview call from one of multiple queues,
  // it also returns a field for the queue name so record/call can be enqueued back to the same queue.
  // It checks for a record first, if no record is dequeued, then the preview call queues will be checked.
  rpc DequeuePreviewRecordOrCall(DequeuePreviewRecordOrCallReq) returns (DequeuePreviewRecordOrCallRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/dequeuepreviewrecordorcall";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Enqueues the given preview record into the specified queue.
  rpc EnqueuePreviewRecord(EnqueuePreviewRecordReq) returns (EnqueuePreviewRecordRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/enqueuepreviewrecord";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Returns the scrubbed simple call data for the given preview record.
  rpc DequeueScrubbedCallForPreviewRecord(DequeueScrubbedCallForPreviewRecordReq) returns (DequeueScrubbedCallForPreviewRecordRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/dequeuescrubbedcallforpreviewrecord";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Clears the preview record return queue for the requesting agent.
  rpc ClearPreviewRecordReturnQueue(ClearPreviewRecordReturnQueueReq) returns (ClearPreviewRecordReturnQueueRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/clearpreviewrecordreturnqueue";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Enqueues the given preview dial call into the specified queue.
  rpc EnqueuePreviewDialCall(EnqueuePreviewDialCallReq) returns (EnqueuePreviewDialCallRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/enqueuepreviewdialcall";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Clears the manual dial return queue of the requesting agent.
  rpc ClearManualDialQueue(ClearManualDialQueueReq) returns (ClearManualDialQueueRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/clearmanualdialqueue";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Enqueues the call to the manual dial receive queue for scrubbing.
  // The call will then be added to the manual dial return queue of the requesting agent.
  // The scrubbed call is then dequeued from that agent's manual dial return queue and returned.
  rpc ProcessManualDialCall(ProcessManualDialCallReq) returns (ProcessManualDialCallRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/processmanualdialcall";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Dequeues a call for manual approval from the requesting agent's hunt group queues or a client queue,
  // it also returns a field for the queue name so call can be enqueued back to the same queue.
  rpc DequeueCallForManualApproval(DequeueCallForManualApprovalReq) returns (DequeueCallForManualApprovalRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/dequeuecallformanualapproval";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Enqueues a call in the MAC approval queue.
  rpc EnqueueManuallyApprovedCall(EnqueueManuallyApprovedCallReq) returns (EnqueueManuallyApprovedCallRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/enqueuemanuallyapprovedcall";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Enqueues a call in the MAC rejection queue.
  rpc EnqueueManuallyRejectedCall(EnqueueManuallyRejectedCallReq) returns (EnqueueManuallyRejectedCallRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/enqueuemanuallyrejectedcall";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Requeues a call requiring manual approval to the specified queue.
  rpc RequeueManuallyApprovedCall(RequeueManuallyApprovedCallReq) returns (RequeueManuallyApprovedCallRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/requeuemanuallyapprovedcall";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Enqueues sms msg in the MAM approval queue.
  rpc EnqueueManuallyApprovedSms(EnqueueManuallyApprovedSmsReq) returns (EnqueueManuallyApprovedSmsRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/enqueuemanuallyapprovedsms";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Enqueues sms msg in the MAM rejection queue.
  rpc EnqueueManuallyRejectedSms(EnqueueManuallyRejectedSmsReq) returns (EnqueueManuallyRejectedSmsRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/enqueuemanuallyrejectedsms";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Requeues sms msg requiring manual approval to the specified queue.
  rpc RequeueManuallyApprovedSms(RequeueManuallyApprovedSmsReq) returns (RequeueManuallyApprovedSmsRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/requeuemanuallyapprovedsms";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Dequeues a sms mam msg for manual approval from the requesting agent's hunt group queues or a client queue,
  // it also returns a field for the queue name so sms mam msg can be enqueued back to the same queue.
  rpc DequeueSmsMamForManualApproval(DequeueSmsMamForManualApprovalReq) returns (DequeueSmsMamForManualApprovalRes) {
    option (google.api.http).post = "/api/v1alpha1/callqueue/callqueue/dequeuesmsmamformanualapproval";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }
}

message DequeuePreviewRecordOrCallReq {
  int32 timeout_minutes = 1;
  int64 agent_session_sid = 2;
}

message DequeuePreviewRecordOrCallRes {
  string queue_name = 1;
  api.commons.SimpleCallData call = 2;
  api.commons.SimpleRecordData record = 3;
}

message EnqueuePreviewRecordReq {
  api.commons.SimpleRecordData record = 1;
  string queue_name = 2;
}

message EnqueuePreviewRecordRes {}

message DequeueScrubbedCallForPreviewRecordReq {
  int64 hunt_group_sid = 1;
  string phone_number = 2;
  int32 phone_num_index = 3;
  int64 task_group_sid = 4;
  int64 task_sid = 5;
}

message DequeueScrubbedCallForPreviewRecordRes {
  api.commons.SimpleCallData call = 1;
}

message ClearPreviewRecordReturnQueueReq {}

message ClearPreviewRecordReturnQueueRes {}

message EnqueuePreviewDialCallReq {
  api.commons.SimpleCallData call = 1;
  string queue_name = 2;
}

message EnqueuePreviewDialCallRes {}

message ClearManualDialQueueReq {}

message ClearManualDialQueueRes {}

message ProcessManualDialCallReq {
  api.commons.SimpleCallData call = 1;
}

message ProcessManualDialCallRes {
  api.commons.SimpleCallData scrubbed_call = 1;
}

message DequeueCallForManualApprovalReq {
  int64 hunt_group_sid = 1;
  int64 agent_session_sid = 2;
  int32 timeout_minutes = 3;
}

message DequeueCallForManualApprovalRes {
  api.commons.SimpleCallData call = 1;
  string queue = 2;
  v0alpha.GetClientInfoDataRes client_info = 3;
  v0alpha.GetClientInfoDisplayTemplateRes client_info_template = 4;
}

message EnqueueManuallyApprovedCallReq {
  api.commons.SimpleCallData call = 1;
}

message EnqueueManuallyApprovedCallRes {}

message EnqueueManuallyRejectedCallReq {
  api.commons.SimpleCallData call = 1;
}

message EnqueueManuallyRejectedCallRes {}

message RequeueManuallyApprovedCallReq {
  api.commons.SimpleCallData call = 1;
  string queue_name = 2;
}

message RequeueManuallyApprovedCallRes {}

message EnqueueManuallyApprovedSmsReq {
  api.commons.SimpleSmsMamData sms = 1;
}

message EnqueueManuallyApprovedSmsRes {}

message EnqueueManuallyRejectedSmsReq {
  api.commons.SimpleSmsMamData sms = 1;
}

message EnqueueManuallyRejectedSmsRes {}

message RequeueManuallyApprovedSmsReq {
  api.commons.SimpleSmsMamData sms = 1;
  string queue_name = 2;
}

message RequeueManuallyApprovedSmsRes {}

message DequeueSmsMamForManualApprovalReq {
  int64 hunt_group_sid = 2;
}

message DequeueSmsMamForManualApprovalRes {
  api.commons.SimpleSmsMamData sms = 1;
  string queue = 2;
}
